/*
  ------------------------------
  COORDINATE CLUSTERING METHOD
  RICHARD TJORNHAMMAR 2009-09-16
  ------------------------------
  NOTE:
  COULD BE GREATLY IMPROVED BY INTRODUCING
  SCF PROCEDURE FOR REDUCING CLUSTERS
  INSTEAD OF THE PRESENT SINGLE SWEEP
  
  HAS BEEN DEVELOPED IN ORDER TO RATIONALIZE
  INPUT FOR QUANTUM MECHANICAL CALCULATIONS 
  ON ATOMIC CONFIGURATIONS

*/
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include "atomNames.h"
#include "cluster.h"

int main(void);

int main(void)
{
  POINT   points[MAXEL];
  CLUST   clusts[MAXEL];
  FILE    *fp;
  int     i,j,k,l,NR,NCtot=0,CLN=0,put,NC=0,NP=0;
  char    str2[2],str[1000];
  float   RL=0.5,RC2,RCC2;
  double  R0,X[3];

   if(VERBO)
  fprintf(stderr,"INITIALIZING STRUCTURES\n");

  //INIT WITH XYZ FILE
  fp=fopen("cnf0.xyz","r");
 
  fscanf(fp,"%d\n",&NR);
  fgets(str,1000,fp);

  //ALLOCATE WORKSPACE
  for(i=0;i<NR;i++){
    points[i] = malloc(sizeof(CONTAINER)+1);
    clusts[i] = malloc(sizeof(CONTAINED)+1);
  }

  if(VERBO)
  fprintf(stderr,"GOT::\n");
  for(i=0;i<NR;i++){
    fscanf(fp,"%s %lf %lf %lf\n",str2,&points[i]->dat.R[0],&points[i]->dat.R[1],&points[i]->dat.R[2]);
    if(VERBO)
      fprintf(stderr,"%s %10.6lf %10.6lf %10.6lf\n",str2,points[i]->dat.R[0]*10,points[i]->dat.R[1]*10,points[i]->dat.R[2]*10);
  }
  
  if(VERBO)
  fprintf(stderr,"ENTERING COORDINATE LOOP\n");
  for(i=0;i<NR;i++){
    put=0;
    if(i==0){
      points[i]->dat.nclust=0;
      clusts[points[i]->dat.nclust]->dat.NPOINTS++;
      CLN=clusts[0]->dat.NPOINTS;
      clusts[points[i]->dat.nclust]->dat.IND[CLN]=i;
      for(j=0;j<DIM;j++)
	clusts[points[i]->dat.nclust]->dat.R[j]=points[i]->dat.R[j];
      clusts[points[i]->dat.nclust]->dat.RAD=0.0;
      NCtot++;
      put=1;
      if(VERBO)
      fprintf(stderr,"POINT %d BELONGS TO NEW CLUSTER NR:: %d \n",i,0);
    }
    else{
      for(k=0;k<NCtot;k++){
	RCC2=0.0;
	for(j=0;j<DIM;j++)	
	  RCC2+=pow(clusts[k]->dat.R[j]-points[i]->dat.R[j],2);
	RCC2=sqrt(RCC2);
	RCC2-=clusts[k]->dat.RAD;
	//	fprintf(stderr,"OUT>>%lf  %lf  %d  ",clusts[k]->dat.RAD,RCC2,RL,k);
	if(RCC2<RL){
	  put++;
	  if(VERBO)
	  printf("POINT %d BELONGS TO EXISTING CLUSTER NR::%d AND IS PUT::%d\n",i,k,put);
	  points[i]->dat.nclust=k;
	  clusts[k]->dat.NPOINTS++;
	  CLN=clusts[k]->dat.NPOINTS;	  
	  clusts[k]->dat.IND[CLN-1]=i;
	  for(j=0;j<DIM;j++){
	    X[j]=0.0;
	    for(l=0;l<CLN;l++){
	      X[j]+=(points[clusts[k]->dat.IND[l]]->dat.R[j])/CLN;
	    }
	    clusts[k]->dat.R[j]=X[j];
	  }
	  clusts[k]->dat.RAD=0.0;
	  for(l=0;l<CLN;l++){
	    R0=0.0;
	    for(j=0;j<DIM;j++){
	      R0+=pow(clusts[k]->dat.R[j]-points[clusts[k]->dat.IND[l]]->dat.R[j],2.0);
	    }
	    clusts[k]->dat.RAD+=sqrt(R0)/CLN;
	  }
	}
	else{
	  if(k==NCtot-1 && !put){
	    if(VERBO)
	    fprintf(stderr,"POINT %d BELONGS TO NEW CLUSTER NR:: %d \n",i,k+1);
	    points[i]->dat.nclust=k+1;
	    clusts[k+1]->dat.NPOINTS++;
	    CLN=clusts[k+1]->dat.NPOINTS;
	    clusts[k+1]->dat.IND[CLN-1]=i;
	    for(j=0;j<DIM;j++)
	      clusts[k+1]->dat.R[j]=points[i]->dat.R[j];
	    clusts[k+1]->dat.RAD=0.0;
	    NC=1;
	  }
	}  
      } // for k
    }
    if(NC)
      NCtot++;
    NC=0;
  } // for i
  
  if(VERBO)
    fprintf(stderr,"ENTERING CLUSTER LOOP\n");
  NC=0;
  for(k=0;k<NCtot;k++){ //NOW LOOP THE CLUSTERS TO SEE THAT THEY ARE UNIQUE ELSE MERGE INTO LOWEST ONE
    for(l=0;l<NCtot;l++){
      if(!(l==k)){
	put=0;
	for(i=0;i<clusts[k]->dat.NPOINTS;i++){
	  for(j=0;j<clusts[l]->dat.NPOINTS;j++){
	    if(clusts[k]->dat.IND[i]==clusts[l]->dat.IND[j]) //FOUND TWO CLUSTERS THAT ARE ONE
	      put=1;
	  }
	}
	if(put){
	  mergeCL(clusts[k],clusts[l]);
	  NC++;
	}
      }
    }
  }
  
  if(VERBO)
    fprintf(stderr,"FOUND %d CLUSTERS BUT REDUCED %d CLUSTERS\n",NCtot,NC);
  if(VERBO)
    for(k=0;k<NCtot;k++)
      showCL(clusts[k]);

  for(i=0;i<NR;i++){
    if(!(points[i]==NULL))
      free(points[i]);
    if(!(clusts[i]==NULL))
      free(clusts[i]);
  }

  fclose(fp);
  return(0);
}

void showCL(CLUST CL)
{
  int i,j,k;
  int NP;
  
  NP=CL->dat.NPOINTS;
  if(NP>0){
    fprintf(stderr,"\nCLUSTER CONTAINS %d POINTS:: \n",NP);
    for(i=0;i<NP;i++)
      fprintf(stderr,"%d ",CL->dat.IND[i]);
    fprintf(stderr,"\nPOSITION::");
    for(j=0;j<DIM;j++)
      fprintf(stderr,"%10.6lf ",CL->dat.R[j]);
    fprintf(stderr,"\nRADIUS  ::%10.6lf\n",CL->dat.RAD);
  }
}

void mergeCL(CLUST CL0, CLUST CL1)
{
  int i,j,k,l;
  int NP0,NP1;
  int FLAG;

  NP0=CL0->dat.NPOINTS;
  NP1=CL1->dat.NPOINTS;

  for(j=0;j<NP1;j++){
    FLAG=1;
    for(i=0;i<NP0;i++){
      if( CL0->dat.IND[i] == CL1->dat.IND[j] ){
	FLAG=0;
      }
    }
    if(FLAG){
      CL0->dat.IND[CL0->dat.NPOINTS]=CL1->dat.IND[j];
      CL0->dat.NPOINTS++;
    }
  }

  CL1->dat.NPOINTS=0;
  CL1->dat.RAD=0.0;
  for(i=0;i<DIM;i++)
    CL1->dat.R[i]=0.0;
  printf("\n");

}
